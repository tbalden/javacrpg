package org.jcrpg.apps;

import org.jcrpg.space.Area;
import org.jcrpg.space.Cube;
import org.jcrpg.space.Side;
import org.jcrpg.threed.J3DCore;
import org.jcrpg.world.Engine;
import org.jcrpg.world.place.Boundaries;
import org.jcrpg.world.place.BoundaryUtils;
import org.jcrpg.world.place.World;
import org.jcrpg.world.place.geography.Forest;
import org.jcrpg.world.place.geography.Plain;

import com.jme.util.LoggingSystem;

public class Jcrpg {

	/**
     * Entry point for the test,
     * 
     * @param args
     */
    public static void main(String[] args) {
    	
    	
    	int[][][][][] cubes = new int[][][][][]
    
{
    	{
				{
					{ {0,8},{0,8},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,8},{0,0},{1,1},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{1,6},{0,2},{0,0} },  { {0,0},{0,8},{0,0},{1,1},{0,2},{0,0} },  { {0,0},{0,8},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
       			},
				{
       				{ {0,8},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
       			},
				{
       				{ {0,0},{0,0},{1,5},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} }, { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },      
       			},
				{
       				{ {0,0},{0,0},{1,6},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,6},{0,0},{0,0},{0,0},{0,2},{0,0} }, { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },      
       			},
				{
       				{ {0,8},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} }, { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },      
       			},
				{
       				{ {0,8},{0,9},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} }, { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },      
       			},
				{
       				{ {0,8},{0,9},{0,9},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} }, { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },      
       			},
    	},
    	{
			{
				{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{1,6},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
   			},
			{
   				{ {0,0},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
   			},
			{
   				{ {0,0},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
   			},
			{
   				{ {0,0},{0,0},{1,6},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,6},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
   			},
			{
   				{ {0,0},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
   			},
			{
   				{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
   			},
			{
   				{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
   			},
	},
	{
		{
			{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{1,6},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} }, { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },      
			},
		{
				{ {0,0},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} }, { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },      
			},
		{
				{ {0,0},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
			},
		{
				{ {0,0},{0,0},{1,6},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,6},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
			},
		{
				{ {0,0},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
			},
			{
				{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
			},
			{
				{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
			},
},
{
	{
		{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{1,6},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{1,1},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
		},
	{
			{ {0,0},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
		},
	{
			{ {0,0},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
		},
	{
			{ {0,0},{0,0},{1,6},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,6},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
		},
	{
			{ {0,0},{0,0},{1,1},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },{ {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {0,0},{0,0},{0,0},{0,0},{1,3},{1,7} },  { {1,1},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
		},
		{
			{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{1,1},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
		},
		{
			{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },{ {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },  { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },    { {0,0},{0,0},{0,0},{0,0},{0,2},{0,0} },   
		},
},
}
 ;
    	/*
    	// generating a demo area
    	Area gameArea = new Area();
   	

    	for (int y=0; y<cubes.length; y++)
    	{	
        	for (int x=0; x<cubes[y].length; x++)
        	{
            	for (int z=0; z<cubes[y][x].length; z++)
            	{
            		
            		
            		Cube c = new Cube(gameArea,Cube.DEFAULT_LEVEL,new Side[]{
            				new Side(cubes[y][x][z][0][0],cubes[y][x][z][0][1]),
            				new Side(cubes[y][x][z][1][0],cubes[y][x][z][1][1]),
            				new Side(cubes[y][x][z][2][0],cubes[y][x][z][2][1]),
            				new Side(cubes[y][x][z][3][0],cubes[y][x][z][3][1]),
            				new Side(cubes[y][x][z][5][0],cubes[y][x][z][5][1]),
            				new Side(y==0?cubes[y][x][z][4][0]:0,y==0?cubes[y][x][z][4][1]:0)
            				},
            				x,y,z);
            		gameArea.addCube(x, y, z, c);
            		
            		
            		c = new Cube(gameArea,Cube.DEFAULT_LEVEL,new Side[]{
            				new Side(cubes[y][x][z][0][0],cubes[y][x][z][0][1]),
            				new Side(cubes[y][x][z][1][0],cubes[y][x][z][1][1]),
            				new Side(cubes[y][x][z][2][0],cubes[y][x][z][2][1]),
            				new Side(cubes[y][x][z][3][0],cubes[y][x][z][3][1]),
            				new Side(cubes[y][x][z][5][0],cubes[y][x][z][5][1]),
            				new Side(y==0?cubes[y][x][z][4][0]:0,y==0?cubes[y][x][z][4][1]:0)
            				},
            				x+cubes[y].length,y,z+cubes[y][x].length);
           		gameArea.addCube(x+cubes[y].length, y, z+cubes[y][x].length, c);
        		c = new Cube(gameArea,Cube.DEFAULT_LEVEL,new Side[]{
        				new Side(cubes[y][x][z][0][0],cubes[y][x][z][0][1]),
        				new Side(cubes[y][x][z][1][0],cubes[y][x][z][1][1]),
        				new Side(cubes[y][x][z][2][0],cubes[y][x][z][2][1]),
        				new Side(cubes[y][x][z][3][0],cubes[y][x][z][3][1]),
        				new Side(cubes[y][x][z][5][0],cubes[y][x][z][5][1]),
        				new Side(y==0?cubes[y][x][z][4][0]:0,y==0?cubes[y][x][z][4][1]:0)
        				},
        				x-cubes[y].length,y,z-cubes[y][x].length);
           		gameArea.addCube(x-cubes[y].length, y, z-cubes[y][x].length, c);
        		c = new Cube(gameArea,Cube.DEFAULT_LEVEL,new Side[]{
        				new Side(cubes[y][x][z][0][0],cubes[y][x][z][0][1]),
        				new Side(cubes[y][x][z][1][0],cubes[y][x][z][1][1]),
        				new Side(cubes[y][x][z][2][0],cubes[y][x][z][2][1]),
        				new Side(cubes[y][x][z][3][0],cubes[y][x][z][3][1]),
        				new Side(cubes[y][x][z][5][0],cubes[y][x][z][5][1]),
        				new Side(y==0?cubes[y][x][z][4][0]:0,y==0?cubes[y][x][z][4][1]:0)
        				},
        				x+cubes[y].length,y,z);
        			gameArea.addCube(x+cubes[y].length, y, z, c);
            		c = new Cube(gameArea,Cube.DEFAULT_LEVEL,new Side[]{
            				new Side(cubes[y][x][z][0][0],cubes[y][x][z][0][1]),
            				new Side(cubes[y][x][z][1][0],cubes[y][x][z][1][1]),
            				new Side(cubes[y][x][z][2][0],cubes[y][x][z][2][1]),
            				new Side(cubes[y][x][z][3][0],cubes[y][x][z][3][1]),
            				new Side(cubes[y][x][z][5][0],cubes[y][x][z][5][1]),
            				new Side(y==0?cubes[y][x][z][4][0]:0,y==0?cubes[y][x][z][4][1]:0)
            				},
            				x-cubes[y].length,y,z);
            		gameArea.addCube(x-cubes[y].length, y, z, c);
            		c = new Cube(gameArea,Cube.DEFAULT_LEVEL,new Side[]{
            				new Side(cubes[y][x][z][0][0],cubes[y][x][z][0][1]),
            				new Side(cubes[y][x][z][1][0],cubes[y][x][z][1][1]),
            				new Side(cubes[y][x][z][2][0],cubes[y][x][z][2][1]),
            				new Side(cubes[y][x][z][3][0],cubes[y][x][z][3][1]),
            				new Side(cubes[y][x][z][5][0],cubes[y][x][z][5][1]),
            				new Side(y==0?cubes[y][x][z][4][0]:0,y==0?cubes[y][x][z][4][1]:0)
            				},
            				x,y, z+cubes[y][x].length);
           		gameArea.addCube(x, y, z+cubes[y][x].length, c);
        		c = new Cube(gameArea,Cube.DEFAULT_LEVEL,new Side[]{
        				new Side(cubes[y][x][z][0][0],cubes[y][x][z][0][1]),
        				new Side(cubes[y][x][z][1][0],cubes[y][x][z][1][1]),
        				new Side(cubes[y][x][z][2][0],cubes[y][x][z][2][1]),
        				new Side(cubes[y][x][z][3][0],cubes[y][x][z][3][1]),
        				new Side(cubes[y][x][z][5][0],cubes[y][x][z][5][1]),
        				new Side(y==0?cubes[y][x][z][4][0]:0,y==0?cubes[y][x][z][4][1]:0)
        				},
        				x,y, z-cubes[y][x].length);
           		gameArea.addCube(x, y, z-cubes[y][x].length, c);
        		c = new Cube(gameArea,Cube.DEFAULT_LEVEL,new Side[]{
        				new Side(cubes[y][x][z][0][0],cubes[y][x][z][0][1]),
        				new Side(cubes[y][x][z][1][0],cubes[y][x][z][1][1]),
        				new Side(cubes[y][x][z][2][0],cubes[y][x][z][2][1]),
        				new Side(cubes[y][x][z][3][0],cubes[y][x][z][3][1]),
        				new Side(cubes[y][x][z][5][0],cubes[y][x][z][5][1]),
        				new Side(y==0?cubes[y][x][z][4][0]:0,y==0?cubes[y][x][z][4][1]:0)
        				},
        				x+cubes[y].length,y, z-cubes[y][x].length);
           		gameArea.addCube(x+cubes[y].length, y, z-cubes[y][x].length, c);
        		c = new Cube(gameArea,Cube.DEFAULT_LEVEL,new Side[]{
        				new Side(cubes[y][x][z][0][0],cubes[y][x][z][0][1]),
        				new Side(cubes[y][x][z][1][0],cubes[y][x][z][1][1]),
        				new Side(cubes[y][x][z][2][0],cubes[y][x][z][2][1]),
        				new Side(cubes[y][x][z][3][0],cubes[y][x][z][3][1]),
        				new Side(cubes[y][x][z][5][0],cubes[y][x][z][5][1]),
        				new Side(y==0?cubes[y][x][z][4][0]:0,y==0?cubes[y][x][z][4][1]:0)
        				},
        				x-cubes[y].length,y, z+cubes[y][x].length);
           		gameArea.addCube(x-cubes[y].length, y, z+cubes[y][x].length, c);
            	}
        	}
    	}
    	*/
    	    	try {
    	    		start();
    	    	} catch (Exception ex)
    	    	{
    	    		ex.printStackTrace();
    	    	}
   }

    public static void start() throws Exception {
		LoggingSystem.getLogger().setLevel(java.util.logging.Level.WARNING);
		Engine e = new Engine();
		Thread t = new Thread(e);
		t.start();
		J3DCore app = new J3DCore();
		
		World w = new World("world", null);
		w.setBoundaries(BoundaryUtils.createCubicBoundaries(100, 1, 1, 1, 0, 0, 0));
		
		Plain p = new Plain("2",null);
		p.setBoundaries(BoundaryUtils.createCubicBoundaries(10, 1, 1, 1, 0, 0, 0));
		w.geographies.put(p.id, p);

		p = new Plain("21",null);
		p.setBoundaries(BoundaryUtils.createCubicBoundaries(10, 1, 1, 1, 0, 0, 1));
		w.geographies.put(p.id, p);
		p = new Plain("22",null);
		p.setBoundaries(BoundaryUtils.createCubicBoundaries(10, 1, 1, 1, 0, 0, 2));
		w.geographies.put(p.id, p);

		p = new Plain("3",null);
		p.setBoundaries(BoundaryUtils.createCubicBoundaries(10, 1, 1, 1, 2, 0, 0));
		w.geographies.put(p.id, p);
		
		p = new Plain("5",null);
		p.setBoundaries(BoundaryUtils.createCubicBoundaries(10, 1, 1, 1, 3, 0, 0));
		w.geographies.put(p.id, p);
		
		Forest f = new Forest("4",null);
		f.setBoundaries(BoundaryUtils.createCubicBoundaries(10, 1, 1, 1, 1, 0, 0));
		w.geographies.put(f.id, f);
		
		app.setWorld(w);
		app.setEngine(e);
		app.setViewPosition(2, 0, 2);
		app.initCore();
	}
}
