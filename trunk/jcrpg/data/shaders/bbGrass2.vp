!!ARBvp1.0
PARAM mv[4] = { state.matrix.modelview };
PARAM mv2[4] = { state.matrix.projection };
PARAM camPos =  program.local[5];
TEMP offsetPos, pos,projpos;
################################
# Apply modelview transformation
DP4 pos.x, mv[0], vertex.position;
DP4 pos.y, mv[1], vertex.position;
DP4 pos.z, mv[2], vertex.position;
DP4 pos.w, mv[3], vertex.position;
################################
# Apply projection matrix
DP4 projpos.x, mv2[0], pos;
DP4 projpos.y, mv2[1], pos;
DP4 projpos.z, mv2[2], pos;
DP4 projpos.w, mv2[3], pos;
################################
# Add offset
TEMP f0,f1,f2,f3,f4;
TEMP t0,t1,t2,t3,t4;
TEMP tmpCamPosFloor;

# create different fraction parts
ADD f0, projpos, 0.0;
ADD f1, projpos, 0.1;
ADD f2, projpos, 0.2;
ADD f3, projpos, 0.3;
ADD f4, projpos, 0.4;
MOV tmpCamPosFloor, camPos;
#FLR tmpCamPosFloor, camPos;
#ADD f0, f0, tmpCamPosFloor;
#ADD f1, f1, tmpCamPosFloor;
#ADD f2, f2, tmpCamPosFloor;
#ADD f3, f3, tmpCamPosFloor;
#ADD f4, f4, tmpCamPosFloor;

# get fraction and substract 0.5 to have negative values too
FRC f0, f0;
SUB f0, f0, 0.5;
FRC f1, f1;
SUB f1, f1, 0.5;
FRC f2, f2;
SUB f2, f2, 0.5;
FRC f3, f3;
SUB f3, f3, 0.5;
FRC f4, f4;
SUB f4, f4, 0.5;

# multiply different sinusoid external params by the texcoord y (highness of the quad) into t[] values
MUL t0, program.local[0], vertex.texcoord[0].yyyy;
MUL t1, program.local[1], vertex.texcoord[0].yyyy;
MUL t2, program.local[2], vertex.texcoord[0].yyyy;
MUL t3, program.local[3], vertex.texcoord[0].yyyy;
MUL t4, program.local[4], vertex.texcoord[0].yyyy;

# The trick: multiply with the different fractions, some of them may result in f[x] being 0, giving the randomness to the movement
# as one of the displacement will fall off
MUL f0, t0, f0;
MUL f1, t1, f1;
MUL f2, t2, f2;
MUL f3, t3, f3;
MUL f4, t4, f4;

# multiply with 2, bigger movements
MUL f0, f0, 4;
MUL f1, f1, 4;
MUL f2, f2, 4;
MUL f3, f3, 4;
MUL f4, f4, 4;

# add all the f[] offsets to position
MOV offsetPos, projpos;
ADD offsetPos.xz, offsetPos, f0;
ADD offsetPos.xz, offsetPos, f1;
ADD offsetPos.xz, offsetPos, f2;
ADD offsetPos.xz, offsetPos, f3;
ADD offsetPos.xz, offsetPos, f4;



MOV result.position, offsetPos;
MOV result.texcoord[0], vertex.texcoord[0];
MOV result.color, vertex.color;
MOV result.fogcoord, vertex.fogcoord;

END